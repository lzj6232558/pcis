<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wolfcode.crm.mapper.AttendanceMapper">
  <resultMap id="BaseResultMap" type="cn.wolfcode.crm.domain.Attendance">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="signInIP" jdbcType="VARCHAR" property="signInIP" />
    <result column="signInDate" jdbcType="TIMESTAMP" property="signInDate" />
    <result column="signOutDate" jdbcType="TIMESTAMP" property="signOutDate" />
    <result column="state" jdbcType="BIT" property="state" />
    <result column="resignInDate" jdbcType="TIMESTAMP" property="resignInDate" />
    <association column="employee_id" javaType="employee"
                 property="employee" select="cn.wolfcode.crm.mapper.EmployeeMapper.selectByPrimaryKey" />
    <association column="resignIn_employee_id" javaType="employee"
                 property="resignInEmployee" select="cn.wolfcode.crm.mapper.EmployeeMapper.selectByPrimaryKey" />

  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    DELETE FROM `attendance`
    WHERE id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyProperty="id" parameterType="cn.wolfcode.crm.domain.Attendance" useGeneratedKeys="true">
    INSERT INTO `attendance` (employee_id, signInIP, signInDate,
      signOutDate, state, resignIn_employee_id, 
      resignInDate)
    VALUES (#{employee.id,jdbcType=BIGINT}, #{signInIP}, #{signInDate,jdbcType=TIMESTAMP},
      #{signOutDate,jdbcType=TIMESTAMP}, #{state,jdbcType=BIT}, #{resignInEmployee.id,jdbcType=BIGINT},
      #{resignInDate,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="cn.wolfcode.crm.domain.Attendance">
    UPDATE `attendance`
    SET employee_id = #{employee.id,jdbcType=BIGINT},
      signInIP = #{signInIP},
      signInDate = #{signInDate,jdbcType=TIMESTAMP},
      signOutDate = #{signOutDate,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=BIT},
      resignIn_employee_id = #{resignInEmployee.id,jdbcType=BIGINT},
      resignInDate = #{resignInDate,jdbcType=TIMESTAMP}
    WHERE id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    SELECT id, employee_id, signInIP, signInDate, signOutDate, state, resignIn_employee_id,
    resignInDate
    FROM `attendance`
    WHERE id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    SELECT id, employee_id, signInIP, signInDate, signOutDate, state, resignIn_employee_id,
    resignInDate
    FROM `attendance`
  </select>



    <!--高级查询条件-->
    <sql id="condition_sql">
        <where>
            <if test="username!=null and username!=''">
                and e.username like concat('%',#{username},'%')
            </if>
            <if test="department!=null and department!=''">
                and e.dept_id =#{department}
            </if>
            <if test="beginDate!=null and beginDate!=''">
                and Date(a.signInDate) &gt;= #{beginDate}
            </if>
            <if test="endDate!=null and endDate !=''">
                and Date(a.signOutDate) &lt;=  #{endDate}
            </if>
        </where>
    </sql>
   <!--分页查询-->
    <select id="queryForyCount" resultType="int">
        SELECT count(a.id)
        FROM attendance a JOIN employee e ON a.employee_id=e.id
        <include refid="condition_sql" />
    </select>
    <select id="queryForList" resultMap="BaseResultMap">
        SELECT a.id, a.employee_id, a.signInIP, a.signInDate, a.signOutDate, a.state, a.resignIn_employee_id,
        resignInDate
        FROM attendance a JOIN employee e ON a.employee_id=e.id
        <include refid="condition_sql"/>
        LIMIT #{beginIndex},#{rows}
    </select>


     <!--检查是否已经签到过-->
     <select id="checkSign" resultMap="BaseResultMap">
        SELECT id, employee_id, signInIP, signInDate, signOutDate, state, resignIn_employee_id,
    resignInDate
       FROM `attendance`
       WHERE  DATE(signInDate) = #{data} AND employee_id=#{employee_id}
     </select>



    <!--签到-->
     <insert id="signIn">
        INSERT INTO `attendance` (employee_id, signInIP, signInDate)
    VALUES (#{employee.id,jdbcType=BIGINT}, #{signInIP,jdbcType=BIGINT}, #{signInDate,jdbcType=TIMESTAMP})
     </insert>


     <!--签退-->
     <update id="signOut">
        UPDATE `attendance`
    SET signOutDate = #{signOutDate,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=BIT}
    WHERE id = #{id,jdbcType=BIGINT}
     </update>

     <!--补签-->
    <update id="resignIn" parameterType="attendance">
        UPDATE `attendance`
    SET resignIn_employee_id = #{resignInEmployee.id,jdbcType=BIGINT},
      resignInDate = #{resignInDate,jdbcType=TIMESTAMP}
    WHERE id = #{id,jdbcType=BIGINT}
    </update>

    <!--检查状态异常-->
    <select id="checkState" resultMap="BaseResultMap">
        SELECT id, employee_id, signInIP, signInDate, signOutDate, state, resignIn_employee_id,
    resignInDate
       FROM `attendance`
       WHERE  signOutDate IS NOT NULL OR resignInDate IS NOT NULL
    </select>
</mapper>